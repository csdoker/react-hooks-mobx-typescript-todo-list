{"version":3,"sources":["theme.ts","components/material-ui-app-bar-container/AppBarContainerWithDrawerStore.tsx","components/material-ui-app-bar-container/AppBarContainerWithDrawer.tsx","entities/TodoList.ts","entities/Todo.ts","entities/TodoListFolder.ts","components/util/util.tsx","features/todo-lists-view/folder-list-dialog/FolderListStore.ts","components/material-ui-modals/MessageDialog/MessageDialogStore.tsx","components/material-ui-modals/MessageDialog/MessageDialogNormalAction.tsx","components/material-ui-modals/MessageDialog/MessageDialogNormalActions.tsx","components/material-ui-modals/MessageDialog/MessageDialogBiggerAction.tsx","components/material-ui-modals/MessageDialog/MessageDialogBiggerActions.tsx","components/material-ui-modals/MessageDialog/MessageDialog.tsx","components/material-ui-modals/message-actions.tsx","components/material-ui-modals/message-yes-no.ts","components/material-ui-modals/SnackbarComponent.tsx","components/material-ui-modals/snackbar.tsx","components/material-ui-modals/index.ts","features/RootStore.ts","components/material-ui-more-button/MoreButton.tsx","features/todo-lists-view/todo-lists/rows/TodoListRow.tsx","components/material-ui-list-items/CollapsibleListItem.tsx","features/todo-lists-view/todo-lists/rows/TodoListFolderRow.tsx","features/todo-lists-view/folder-list-dialog/FolderListDialog.tsx","features/todo-lists-view/todo-lists/TodoListsDrawerContent.tsx","features/todos-view/TodosStore.tsx","features/todos-view/todo/TodoRowStore.tsx","components/material-ui-checkbox-with-label/CheckBoxWithLabel.tsx","features/todos-view/todo/TodoDetail.tsx","features/todos-view/todo/TodoRow.tsx","features/todos-view/TodosList.tsx","features/todos-view/todo/NewTodo.tsx","features/todos-view/TodosView.tsx","features/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","type","primary","light","main","dark","secondary","AppBarContainerWithDrawerStore","sp","setDrawerWidth","setTimeout","drawerWidth","drawer","clientWidth","undefined","bigScreenChanged","change","newValue","setBigScreen","initialDrawerOpenChanged","setOpen","this","permanent","bigScreen","setStore","observe","minWidth","open","marginLeft","observable","action","window","removeEventListener","addEventListener","big","computed","useStyles","makeStyles","root","flexGrow","toolbar","minHeight","spacing","menuButton","marginRight","title","whiteSpace","overflow","textOverflow","display","justifyContent","alignItems","list","width","content","top","padding","appbar","zIndex","drawerOffset","height","AppBarContainerWithDrawer","observer","props","useTheme","useMediaQuery","breakpoints","up","classes","store","useLocalStore","source","initialDrawerOpen","className","style","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","drawerToggle","Typography","variant","rightButtons","childrenDivStyle","children","Drawer","onClose","drawerStyle","ref","setDrawer","TodoList","name","todos","id","Todo","description","inputRef","createRef","newTodo","done","notes","dueDate","map","t","clone","todo","TodoListFolder","lists","collapsibleStore","setCollapsibleStore","removeItemFromArray","array","item","index","indexOf","splice","focusWithStartingCaret","input","focus","ctrl","pos","setSelectionRange","createTextRange","range","collapse","moveEnd","moveStart","select","setCaretPosition","FolderListStore","rootStore","folder","value","length","selectAllText","current","listFolder","showNameEditor","folderOrListName","entityType","actionType","FormErrorHandler","errorHandler","reset","addNewList","collapsed","toggleOpen","closeAddFolderList","addNewFolder","error","event","key","confirmAction","MessageDialogStore","firstButton","removed","handleDirectClose","handleClose","parentDefinesOpen","isOpened","container","actions","a","canGoOn","preCallbackValidation","resolve","callback","ReactDOM","unmountComponentAtNode","MessageDialogStoreContext","createContext","MessageDialogNormalAction","useContext","localStore","prop","buttonRef","button","Button","buttonWithTooltip","Tooltip","Fragment","MessageDialogNormalActions","DialogActions","MessageDialogBiggerAction","Divider","component","ListItem","ListItemText","MessageDialogBiggerActions","DialogContent","List","MessageDialog","TransitionComponent","dialogProps","useEffect","document","body","removeChild","dialog","Provider","Dialog","aria-labelledby","aria-describedby","DialogTitle","hasNormalActions","hasBiggerActions","hasSeparateContainer","modalConfig","messageActions","options","Promise","reject","push","div","createElement","render","appendChild","messageYesNo","answer","success","backgroundColor","green","warning","yellow","red","info","blue","icon","fontSize","iconVariant","opacity","message","SnackbarComponent","anchorOrigin","autoHideDuration","useRef","useState","contentClass","useMemo","Icon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","useCallback","origin","vertical","horizontal","snackbarActions","Snackbar","ContentProps","clsx","fontWeight","snackbar","RootStore","folderStore","newTodoInputRef","newTodoFocus","appBarStore","setAppBarStore","todoListsAndFolders","selectTodoList","selectedTodoList","RootStoreContext","MoreButton","size","anchorRef","stopPropagation","close","anchorEl","option","MoreButtonItem","React","forwardRef","handleClick","text","withTooltip","MenuItem","TodoListRow","nestingLevel","paddingLeft","deleteList","renameList","closeIfTemporary","listItemStyle","selected","ListItemIcon","CollapsibleListItemStore","initialCollapsed","CollapsibleListItem","label","Collapse","in","add","margin","TodoListFolderRow","addListToFolder","deleteFolder","renameFolder","disablePadding","FolderListDialog","maxWidth","stateObject","propertyName","TextField","inputProps","fullWidth","onKeyUp","onFolderEnterPress","fabList","bottom","right","fabFolder","TodoListsDrawerContent","listOrFolder","Fab","addFolder","addList","TodosStore","todosContainer","filter","doneTodosOnCurrentList","TodosStoreContext","TodoRowStore","saveDetail","closeDetail","deleteTodo","detailOpen","editableTodo","copyFrom","todosStore","notDoneTodosOnCurrentList","currentTodoIndex","lastIndex","last","TodoStoreContext","CheckBoxWithLabel","FormControlLabel","control","Checkbox","required","onChange","checked","disabled","autoFocus","helperText","FormHelperText","SlideUpTransition","direction","nullChange","TodoDetail","Grid","xs","readOnly","config","elementValueForUndefinedOrNull","autoOk","format","multiline","TodosView","checkbox","completed","textDecoration","TodoRow","InputBase","onKeyDown","onInputKeyPress","moment","openDetail","TodosList","NewTodo","addTodoToCurrent","keyPressAdd","e","canAdd","placeholder","endAdornment","typography","Paper","hasDoneTodosOnCurrentList","Main","titlePrefix","App","utils","Utils","Boolean","location","hostname","match","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d1784f4.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\n\nexport const theme = createMuiTheme({\n    \n    palette: {\n        type: 'light',\n        primary: {\n            light: '#4682b4',\n            main: '#4682b4',\n            dark: '#4682b4',\n        },\n        secondary: {\n            light: '#ff6347',\n            main: '#ff6347',\n            dark: '#ff6347',\n        },\n    },\n    \n})\n","import { observable, action, computed, observe, IValueDidChange } from \"mobx\"\nimport { AppBarContainerWithDrawerProps } from \"./AppBarContainerWithDrawer\";\n\ntype ParamsProps = AppBarContainerWithDrawerProps &  {\n    bigScreen: boolean\n    initialDrawerOpen?: boolean\n}\n\nexport class AppBarContainerWithDrawerStore {\n   \n    constructor(sp: ParamsProps) {\n        this.sp = sp\n        this.permanent = sp.bigScreen    \n        this.sp.setStore && this.sp.setStore(this)\n\n        observe(this.sp, 'bigScreen', this.bigScreenChanged)\n        observe(this.sp, 'initialDrawerOpen', this.initialDrawerOpenChanged)\n    }\n    sp: ParamsProps\n\n    @observable drawer: HTMLDivElement | null = null\n    @observable drawerWidth?: number\n    \n    @action setDrawer = (drawer: HTMLDivElement | null) => {\n        if (drawer) {\n            this.drawer = drawer\n            this.drawerWidth = this.drawer.clientWidth\n            window.removeEventListener('resize', this.setDrawerWidth)\n            window.addEventListener('resize', this.setDrawerWidth)\n        } else {\n            this.drawer = null\n            window.removeEventListener('resize', this.setDrawerWidth)\n        }\n    }\n\n    setDrawerWidth = () => {\n        setTimeout(() => {\n            this.drawerWidth = this.drawer?.clientWidth ?? undefined   \n        });\n    }\n    \n    bigScreenChanged = (change: IValueDidChange<boolean>) => {\n        if (change.newValue) {\n            this.setBigScreen(true)\n        } else {\n            this.setBigScreen(false)\n        }\n    }\n\n    initialDrawerOpenChanged = (change: IValueDidChange<undefined | boolean>) => {\n        if (change.newValue !== undefined) {\n            this.setOpen(change.newValue)\n        }\n    }\n\n    @observable open = false\n    @observable permanent = true\n\n    @action setBigScreen = (big: boolean) => {\n        this.setOpen(big)\n        this.permanent = big\n    }\n\n    @action setOpen = (open: boolean) => this.open = open\n    @action onClose = () => this.open = false\n    @action drawerToggle = () => this.open = !this.open\n    @action closeIfTemporary = () => !this.permanent && this.setOpen(false)\n\n    @computed get drawerStyle(): React.CSSProperties {\n        return {\n            minWidth: 250\n        }\n    }\n\n    @computed get childrenDivStyle(): React.CSSProperties | undefined {\n        if (this.permanent && this.open && this.drawerWidth) {\n            return { marginLeft: this.drawerWidth }\n        }\n        return undefined\n    }\n}","import React from \"react\"\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\"\nimport Drawer from '@material-ui/core/Drawer';\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { AppBarContainerWithDrawerStore } from \"./AppBarContainerWithDrawerStore\"\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    toolbar: {\n        minHeight: theme.spacing(7)\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        display: 'flex', justifyContent: 'flex-start', alignItems: 'center'\n    },\n    list: {\n        width: 250,\n    },\n    content: {\n        top: 0,\n        padding: theme.spacing(8, 1, 1, 1),\n    },\n    appbar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawerOffset: {\n        height: theme.spacing(7)\n    },\n}))\n\n\nexport interface AppBarContainerWithDrawerProps {\n    title?: React.ReactNode\n    rightButtons?: React.ReactNode[]\n    style?: React.CSSProperties\n    drawer?: React.ReactNode\n    initialDrawerOpen?: boolean\n    setStore?: (store: AppBarContainerWithDrawerStore) => any\n}\n\nexport const AppBarContainerWithDrawer = observer((props: React.PropsWithChildren<AppBarContainerWithDrawerProps>) => {\n    const theme = useTheme()\n    const bigScreen = useMediaQuery(theme.breakpoints.up('md'));\n    \n    const classes = useStyles()\n    const store = useLocalStore(source => new AppBarContainerWithDrawerStore(source), { bigScreen, ...props, initialDrawerOpen: props.initialDrawerOpen })\n\n    return (<>\n        <div className={classes.root} style={props.style}>\n            <AppBar position=\"fixed\" className={(store.permanent ? classes.appbar : undefined)}>\n                <Toolbar className={classes.toolbar}>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"Menu\"\n                        onClick={store.drawerToggle}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n\n                    <Typography color=\"inherit\" variant=\"h6\" className={classes.title}>\n                        {props.title}\n                    </Typography>\n\n                    {props.rightButtons}\n\n                </Toolbar>\n            </AppBar>\n            <div style={store.childrenDivStyle} className={classes.content}>\n                {props.children}\n            </div>\n        </div>\n\n        <Drawer\n            variant={(store.permanent && store.open) ? 'persistent' : 'temporary'}\n            open={store.open}\n            onClose={store.onClose}>\n            <div style={store.drawerStyle} ref={store.setDrawer}>\n                {store.permanent && <div className={classes.drawerOffset} />}\n                {props.drawer}\n            </div>\n        </Drawer>\n    </>)\n})\n\n","import { observable } from 'mobx'\nimport Todo from './Todo'\n\nexport default class TodoList {\n    constructor(name?: string, todos?: Todo[]) {\n        if (name) this.name = name\n        if (todos) this.todos = todos\n    }\n    @observable name = \"New List\"\n    @observable todos = [] as Todo[]\n}","import { observable, action } from 'mobx'\nimport { createRef } from 'react'\nimport { Moment } from 'moment'\n\nlet id = 0\nexport default class Todo {\n    constructor(description?: string) {\n        if (description) this.description = description\n        this.id = ++id\n    }\n\n    inputRef = createRef<HTMLInputElement>()\n    id: number\n    @observable done = false\n    @observable description = \"\"\n\n    @observable notes = \"\"\n    @observable dueDate: Moment | null = null\n    @observable todos = [] as Todo[]\n\n    @action clone = () => {\n        const newTodo = new Todo(this.description);\n        newTodo.id = this.id\n        newTodo.done = this.done\n        newTodo.notes = this.notes\n        newTodo.dueDate = this.dueDate\n        newTodo.todos = this.todos.map(t => t.clone())\n        return newTodo\n    }\n\n    @action copyFrom = (todo: Todo) => {\n        this.id = todo.id\n        this.description = todo.description\n        this.done = todo.done\n        this.notes = todo.notes\n        this.dueDate = todo.dueDate\n        this.todos = todo.todos.map(t => t.clone())\n    }\n}","import { observable } from 'mobx'\nimport TodoList from './TodoList'\nimport { CollapsibleListItemStore } from 'components/material-ui-list-items/CollapsibleListItem'\n\nexport default class TodoListFolder {\n    constructor(name?: string, lists?: TodoList[]) {\n        if (name) this.name = name\n        if (lists) this.lists = lists\n    }\n    @observable name = \"New List Folder\"\n    @observable lists = [] as TodoList[]\n    collapsibleStore?: CollapsibleListItemStore\n    setCollapsibleStore = (collapsibleStore: CollapsibleListItemStore) => this.collapsibleStore = collapsibleStore\n}","export const htmlSpace = '\\u00A0'\nexport const htmlDash = '\\u2013'\nexport const htmlDashSeparator = htmlSpace + htmlDash + htmlSpace\n\nexport function cloneObject<T extends object>(obj: T) {\n    return JSON.parse(JSON.stringify(obj)) as T\n}\n\nexport function removeItemFromArray<T>(array: T[], item: T) {\n    const index = array.indexOf(item)\n    if (index >= 0) {\n        array.splice(index, 1)\n    }\n}\n\nexport function removeFromArray<T>(array: T[], predicate: (item: T) => boolean) {\n    const index = array.findIndex(predicate)\n    if (index >= 0) {\n        array.splice(index, 1)\n        return true\n    }\n    return false\n}\n\nexport function isArray(v: any): v is Array<any> {\n    // works for both simple arrays and mobx observables as well\n    return !!v && !!v.map && !!v.slice && !!v.splice\n}\n\nexport function setCaretPosition(ctrl: HTMLInputElement, pos: number) {\n    // Modern browsers\n    if (ctrl.setSelectionRange) {\n        ctrl.focus();\n        ctrl.setSelectionRange(pos, pos);\n\n        // IE8 and below\n    } else if ((ctrl as any).createTextRange) {\n        var range = (ctrl as any).createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pos);\n        range.moveStart('character', pos);\n        range.select();\n    }\n}\n\nexport function focusWithStartingCaret(input: HTMLInputElement | null) {\n    if (input) {\n        input.focus()\n        setTimeout(() => {\n            setCaretPosition(input, 0)\n        });\n    }\n}\n\nexport function selectAllText(ctrl: HTMLInputElement | null) {\n    if (!ctrl) {\n        return\n    }\n\n    // Modern browsers\n    if (ctrl.setSelectionRange) {\n        ctrl.focus();\n        ctrl.setSelectionRange(0, ctrl.value.length);\n\n        // IE8 and below\n    } else if ((ctrl as any).createTextRange) {\n        ctrl.focus();\n        var range = (ctrl as any).createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', ctrl.value.length);\n        range.moveStart('character', 0);\n        range.select();\n    }\n}","import { observable, action } from \"mobx\";\nimport { RootStore } from \"../../RootStore\";\nimport TodoListFolder from \"entities/TodoListFolder\";\nimport TodoList from \"entities/TodoList\";\nimport { createRef } from \"react\";\nimport { selectAllText } from \"components/util/util\";\nimport { FormErrorHandler } from \"input-props\";\n\nexport class FolderListStore {\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore\n\n    }\n    rootStore: RootStore\n    @observable errorHandler = new FormErrorHandler<FolderListStore>()\n    @observable showNameEditor = false\n    @observable folderOrListName = \"\"\n    @observable entityType?: 'list' | 'folder'\n    @observable actionType?: 'add' | 'edit'\n\n    inputRef = createRef<HTMLInputElement | null>()\n    folder?: TodoListFolder\n    list?: TodoList\n\n    focus = () => {\n        setTimeout(() => {\n            selectAllText(this.inputRef.current)\n        }, 100)\n    }\n\n    @action addListToFolder(listFolder: TodoListFolder) {\n        this.showNameEditor = true\n        this.folderOrListName = \"\"\n        this.entityType = 'list'\n        this.actionType = 'add'\n        this.folder = listFolder\n        this.focus()\n    }\n\n    @action addList = () => {\n        this.showNameEditor = true\n        this.folderOrListName = \"\"\n        this.entityType = 'list'\n        this.actionType = 'add'\n        this.folder = undefined\n        this.focus()\n    }\n\n    @action addFolder = () => {\n        this.showNameEditor = true\n        this.folderOrListName = \"\"\n        this.entityType = 'folder'\n        this.actionType = 'add'\n        this.focus()\n    }\n\n    @action renameFolder = (listFolder: TodoListFolder) => {\n        this.folder = listFolder\n        this.showNameEditor = true\n        this.folderOrListName = listFolder.name\n        this.entityType = 'folder'\n        this.actionType = 'edit'\n        this.focus()\n    }\n\n    @action renameList = (list: TodoList) => {\n        this.list = list\n        this.showNameEditor = true\n        this.folderOrListName = list.name\n        this.entityType = 'list'\n        this.actionType = 'edit'\n        this.focus()\n    }\n\n    @action confirmAction = () => {\n        this.errorHandler.reset()\n        if (!this.folderOrListName) {\n            this.errorHandler.error('folderOrListName', \"Mandatory\")\n            return\n        }\n        if (this.entityType === 'list') {\n            if (this.actionType === 'add') {\n                this.rootStore.addNewList(new TodoList(this.folderOrListName), this.folder)\n\n                if (!this.folder?.collapsibleStore?.collapsed) {\n                    this.folder?.collapsibleStore?.toggleOpen()\n                }\n            } else {\n                this.list!.name = this.folderOrListName\n            }\n            this.closeAddFolderList()\n        } else {\n            if (this.actionType === 'add') {\n                this.rootStore.addNewFolder(new TodoListFolder(this.folderOrListName))\n            } else {\n                this.folder!.name = this.folderOrListName\n            }\n            this.closeAddFolderList()\n        }\n\n    }\n    @action closeAddFolderList = () => {\n        this.showNameEditor = false\n    }\n    @action onFolderEnterPress = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'Enter') {\n            this.confirmAction()\n        }\n    }\n}","import ReactDOM from \"react-dom\"\nimport { createRef, createContext } from \"react\"\nimport { observable, action, computed } from \"mobx\"\nimport { MessageDialogProps, MessageDialogAction } from \"./MessageDialog\"\n\nexport class MessageDialogStore {\n    constructor(source: MessageDialogProps) {\n        this.source = source\n    }\n    source: MessageDialogProps\n\n    @observable isOpened = true\n    @computed get parentDefinesOpen() {\n        return typeof this.source.open === 'boolean'\n    }\n    \n    @computed get open() {\n        if (this.parentDefinesOpen) {\n            return !!this.source.open\n        } else {\n            return this.isOpened\n        }\n    }\n\n    firstButton = createRef<undefined | HTMLInputElement>()\n    removed = false\n\n    handleDirectClose = () => {\n        return this.handleClose()\n    }\n\n    @action handleClose = async (action?: MessageDialogAction) => {\n        // in case the caller is using callbacks\n        let canGoOn = true\n\n        if (!!action && !!action.preCallbackValidation) {\n            canGoOn = await action.preCallbackValidation()\n        }\n\n        if (canGoOn) {\n            // in case the caller is using async promises\n            if (!!this.source.resolve) {\n                if (!!action) {\n                    this.source.resolve(action)\n                }\n                else {\n                    this.source.resolve({ name: '' })\n                }\n            }\n            if (!!action && !!action.callback) {\n                action.callback()\n            }\n\n            if (!action) {\n                this.source.onClose && this.source.onClose()\n            }\n            \n            this.isOpened = false\n            \n            if (!!this.source.container) {\n                ReactDOM.unmountComponentAtNode(this.source.container)\n            }\n        }\n    }\n    \n    @computed get hasSeparateContainer() {\n        return !!this.source.container\n    }\n\n    @computed get hasNormalActions() {\n        return this.source.actions && (!this.source.variant || this.source.variant === 'normal')\n    }\n\n    @computed get hasBiggerActions() {\n        return this.source.actions && this.source.variant === 'bigger actions'\n    }\n}\n\nexport const MessageDialogStoreContext = createContext(new MessageDialogStore({}))","import React, { useContext } from \"react\"\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport { MessageDialogAction } from \"./MessageDialog\"\nimport { MessageDialogStoreContext } from \"./MessageDialogStore\"\nimport Button from \"@material-ui/core/Button\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\n\ninterface MessageDialogNormalActionProps {\n    action: MessageDialogAction\n    index: number\n}\nexport const MessageDialogNormalAction = observer(({ action, index }: MessageDialogNormalActionProps) => {\n    const store = useContext(MessageDialogStoreContext)\n\n    const localStore = useLocalStore(source => ({\n        handleClose() {\n            store.handleClose(source.action)\n        }\n    }), { action, index })\n\n    const prop = (index === 0 ? { buttonRef: store.firstButton } : {})\n    const button = (\n        <Button onClick={localStore.handleClose} color={action.color || 'inherit'} {...prop} key={`dialogbutton${index}`}>\n            {action.name}\n        </Button>\n    )\n\n    const buttonWithTooltip = (!!action.title ? (\n        <Tooltip title={action.title}>\n            {button}\n        </Tooltip>\n    ) : button)\n\n    return (\n        <React.Fragment key={index}>\n            {index > 0 && <br />}\n            {buttonWithTooltip}\n        </React.Fragment>\n    )\n})","import React, { useContext } from \"react\"\nimport { observer } from \"mobx-react-lite\"\nimport { MessageDialogStoreContext } from \"./MessageDialogStore\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport { MessageDialogNormalAction } from \"./MessageDialogNormalAction\"\n\nexport const MessageDialogNormalActions = observer(() => {\n    const store = useContext(MessageDialogStoreContext)\n    \n    return (\n        <DialogActions>\n            {store.source.actions?.map((item, index) => <MessageDialogNormalAction key={index} action={item} index={index} /> )}\n        </DialogActions>\n    )\n})","import React, { useContext } from \"react\"\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport { MessageDialogAction } from \"./MessageDialog\"\nimport { MessageDialogStoreContext } from \"./MessageDialogStore\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Divider from \"@material-ui/core/Divider\"\n\ninterface MessageDialogBiggerActionProps {\n    action: MessageDialogAction\n    index: number\n}\nexport const MessageDialogBiggerAction = observer(({ action, index }: MessageDialogBiggerActionProps) => {\n    const store = useContext(MessageDialogStoreContext)\n\n    const localStore = useLocalStore(source => ({\n        handleClose() {\n            store.handleClose(source.action)\n        }\n    }), { action, index })\n\n    return (\n        <React.Fragment key={index}>\n            <Divider component=\"li\" />\n            <ListItem button onClick={localStore.handleClose} key={`dialogbutton${index}`}>\n                <ListItemText primary={(\n                    <Typography color={action.color}>\n                        {action.name}\n                    </Typography>\n                )} />\n\n            </ListItem>\n            {index === store.source.actions!.length - 1 && <Divider component=\"li\" />}\n        </React.Fragment>\n    )\n})","import React, { useContext } from \"react\"\nimport { observer } from \"mobx-react-lite\"\nimport { MessageDialogStoreContext } from \"./MessageDialogStore\"\nimport { MessageDialogBiggerAction } from \"./MessageDialogBiggerAction\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport List from \"@material-ui/core/List\"\n\nexport const MessageDialogBiggerActions = observer(() => {\n    const store = useContext(MessageDialogStoreContext)\n    return (\n        <DialogContent>\n            <List>\n                {store.source.actions?.map((item, index) => <MessageDialogBiggerAction key={index} action={item} index={index} />)}\n            </List>\n        </DialogContent>\n    )\n})","import Dialog, { DialogProps } from \"@material-ui/core/Dialog\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport React, { useEffect } from \"react\"\nimport { MuiThemeProvider } from \"@material-ui/core/styles\"\nimport { modalConfig } from \"..\"\nimport { useLocalStore, observer } from \"mobx-react-lite\"\nimport { MessageDialogStore, MessageDialogStoreContext } from \"./MessageDialogStore\"\nimport { MessageDialogNormalActions } from \"./MessageDialogNormalActions\"\nimport { MessageDialogBiggerActions } from \"./MessageDialogBiggerActions\"\nimport { TransitionProps } from \"@material-ui/core/transitions/transition\"\n\nexport type ActionColorType = \"inherit\" | \"primary\" | \"secondary\"\n\nexport interface MessageOptions extends Pick<DialogProps, \"fullWidth\" | \"maxWidth\" | \"scroll\" | \"fullScreen\"> {\n   /** array of possible actions */\n   actions?: MessageDialogAction[],\n   /** dialog's title */\n   title?: React.ReactElement | string,\n   /** dialog's content*/\n   content?: React.ReactElement | string,\n   /** variants on how the message/actions are displayed */\n   variant?: 'normal' | 'bigger actions'\n}\n\nexport interface MessageDialogAction {\n   /** action name (will appear on button) */\n   name: string\n   /** action title (will be a tooltip) */\n   title?: string\n   /** action itself (what to execute if the user clicks the button) */\n   callback?: () => any\n   /** function that returns true or false whether the user can proceed with that action */\n   preCallbackValidation?: () => Promise<boolean>\n   /** button color */\n   color?: ActionColorType\n   /** action identifier, to identify the message when using async await actions instead of callbacks */\n   identifier?: string\n}\n\nexport type TransitionComponentProps = TransitionProps & { children?: React.ReactElement<any, any> }\n\nexport type MessageDialogProps = MessageOptions & {\n   container?: HTMLElement,\n   resolve?: (value?: MessageDialogAction | PromiseLike<MessageDialogAction> | undefined) => void\n   children?: React.ReactNode;\n   open?: boolean\n   onClose?: () => any\n   TransitionComponent?: React.ComponentType<TransitionComponentProps>;\n}\n\nexport const MessageDialog = observer(({ actions, title, content, variant, container, resolve, onClose, open, children, TransitionComponent, ...dialogProps }: MessageDialogProps) => {\n   const store = useLocalStore(source => new MessageDialogStore(source), { actions, title, content, variant, container, resolve, onClose, open })\n\n   useEffect(() => {\n      return () => {\n         if (store.removed)\n            return\n         if (!!container) {\n            document.body.removeChild(container)\n            store.removed = true\n         }\n      }\n   })\n\n   useEffect(() => {\n      setTimeout(() => {\n         if (store.firstButton.current) {\n            store.firstButton.current.focus()\n         }\n      })\n   })\n\n   const dialog = (\n      <MessageDialogStoreContext.Provider value={store}>\n         <Dialog\n            {...dialogProps}\n            open={store.open}\n            onClose={store.handleDirectClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            TransitionComponent={TransitionComponent}\n         >\n            {!!title &&\n               <DialogTitle id=\"alert-dialog-title\">\n                  {title}\n               </DialogTitle>\n            }\n            {!!content &&\n               <DialogContent>\n                  {content}\n               </DialogContent>\n            }\n            {!!children &&\n               <DialogContent>\n                  {children}\n               </DialogContent>\n            }\n            {!!store.hasNormalActions && <MessageDialogNormalActions />}\n            {!!store.hasBiggerActions && <MessageDialogBiggerActions />}\n         </Dialog>\n      </MessageDialogStoreContext.Provider>\n   )\n\n   if (store.hasSeparateContainer) {\n      return (\n         <MuiThemeProvider theme={modalConfig.theme}>\n            {dialog}\n         </MuiThemeProvider>\n      )\n   } else {\n      return dialog\n   }\n\n})","import ReactDOM from \"react-dom\";\nimport React from \"react\"\nimport { MessageDialog } from \".\";\nimport { MessageDialogAction, MessageOptions } from \"./MessageDialog/MessageDialog\";\n\n/** shows dialog for user with different buttons/actions */\nexport const messageActions = async (options: MessageOptions) => new Promise<MessageDialogAction>((resolve, reject) => {\n    if (!options.actions) {\n        options.actions = []\n    }\n\n    if (options.actions.length === 0) {\n        options.actions.push({ name: 'Close', color: 'primary' })\n    }\n\n    var div = document.createElement('div');\n    ReactDOM.render(\n        <MessageDialog container={div} {...options} resolve={resolve} />,\n        document.body.appendChild(div)\n    );\n})\n","import { messageActions } from \".\"\n\ninterface messageYesNoProps {\n    title?: React.ReactElement | string, content: React.ReactElement | string\n}\nexport async function messageYesNo({ title, content } : messageYesNoProps): Promise<boolean> {\n\n    const answer = await messageActions({\n        title: title, content: content, actions: [\n            {\n                name: 'Yes',\n                color: 'primary'\n            },\n            {\n                name: 'No',\n                color: 'primary'\n            },\n        ]\n    })\n    \n    if (!!answer && answer.name === 'Yes') {\n        return true\n    }\n\n    return false\n}","import ReactDOM from \"react-dom\"\nimport Snackbar, { SnackbarOrigin } from \"@material-ui/core/Snackbar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport React, { useEffect, useState, useRef, useMemo, useCallback } from \"react\"\nimport CloseIcon from '@material-ui/icons/Close'\nimport { MuiThemeProvider } from \"@material-ui/core/styles\"\nimport { modalConfig } from \".\"\nimport { SnackbarOptions } from \"./snackbar\"\n\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport WarningIcon from '@material-ui/icons/Warning'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { green, yellow, red, blue } from \"@material-ui/core/colors\"\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles(theme => ({\n   success: {\n      backgroundColor: green[600]\n   },\n   warning: {\n      backgroundColor: yellow[800]\n   },\n   error: {\n      backgroundColor: red[700]\n   },\n   info: {\n      backgroundColor: blue[600]\n   },\n   icon: {\n      fontSize: 20\n   },\n   iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n   },\n   message: {\n      display: 'flex',\n      alignItems: 'center'\n   }\n}))\n\nexport const SnackbarComponent = ({\n   title,\n   anchorOrigin,\n   autoHideDuration,\n   variant = 'info',\n   container,\n   actions = [],\n}: SnackbarOptions & { container: HTMLElement }) => {\n   const removed = useRef(false)\n   const [open, setOpen] = useState(true)\n   const classes = useStyles()\n\n   const contentClass = useMemo(() => {\n      return classes[variant]\n   }, [classes, variant])\n\n   const Icon = useMemo(() => {\n      switch (variant) {\n         case 'success':\n            return CheckCircleIcon\n         case 'warning':\n            return WarningIcon\n         case 'error':\n            return ErrorIcon\n         case 'info':\n            return InfoIcon\n      }\n   }, [variant])\n\n   useEffect(() => {\n      return () => {\n         if (removed.current)\n            return\n\n         document.body.removeChild(container)\n         removed.current = true\n      }\n   })\n\n   const handleClose = useCallback(() => {\n      setOpen(false)\n      setTimeout(() => ReactDOM.unmountComponentAtNode(container))\n   },[container])\n\n   const origin = useMemo(() => {\n      if (anchorOrigin) {\n         return anchorOrigin\n      } else {\n         return {\n            vertical: 'top',\n            horizontal: 'center',\n         } as SnackbarOrigin\n      }\n   }, [anchorOrigin])\n\n   const snackbarActions = useMemo(() => {\n      return [\n         <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            onClick={handleClose}\n         >\n            <CloseIcon />\n         </IconButton>,\n         ...actions]\n   }, [actions, handleClose])\n\n   return (\n      <MuiThemeProvider theme={modalConfig.theme}>\n         <Snackbar\n            anchorOrigin={origin}\n            open={open}\n            autoHideDuration={autoHideDuration || 6000}\n            onClose={handleClose}\n            ContentProps={{\n               'aria-describedby': 'message-id',\n               classes: {\n                  root: contentClass\n               }\n            }}\n            message={\n               <span id=\"message-id\" className={classes.message}>\n                  <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                  <span style={{ fontWeight: 600 }}>{title}</span>\n               </span>\n            }\n            action={snackbarActions}\n         />\n      </MuiThemeProvider>\n   )\n}\n","import React from 'react'\nimport { SnackbarComponent } from \"./SnackbarComponent\"\nimport ReactDOM from \"react-dom\"\nimport { SnackbarOrigin } from '@material-ui/core/Snackbar'\n\nexport interface SnackbarOptions {\n    /** text that will appear on the snackbar */\n    title: string,\n    anchorOrigin?: SnackbarOrigin\n    autoHideDuration?: number | null\n    variant?: 'success' | 'warning' | 'error' | 'info'\n    actions?: React.ReactNode[]\n }\n \n /**\n  * shows a snackbar to the user. Useful for non-obstrusive updates like 'entity was saved successfully)\n  * @param options snackbar options\n  */\n export function snackbar(options: SnackbarOptions) {\n    var div = document.createElement('div')\n    ReactDOM.render(\n       <SnackbarComponent container={div} {...options} />,\n       document.body.appendChild(div)\n    )\n }\n \n ","import { Theme, createMuiTheme } from \"@material-ui/core/styles\"\n\ninterface ModalConfig {\n    theme: Theme\n}\n\nexport const modalConfig: ModalConfig = {\n    theme: createMuiTheme()\n}\n\nexport function setModalTheme(theme: Theme) {\n    modalConfig.theme = theme\n}\n\nexport { MessageDialog } from \"./MessageDialog/MessageDialog\"\nexport { LoadingModal } from \"./LoadingModal\"\nexport { messageActions } from \"./message-actions\"\nexport { messageConfirm } from \"./message-confirm\"\nexport { messageError } from \"./message-error\"\nexport { messageNoYes } from \"./message-no-yes\"\nexport { messageWarning } from \"./message-warning\"\nexport { messageYesNo } from \"./message-yes-no\"\nexport { snackbar } from \"./snackbar\"\n","import { createContext, createRef } from \"react\"\nimport { observable, action, computed, observe, IObservableArray } from \"mobx\"\nimport TodoList from \"entities/TodoList\"\nimport Todo from \"entities/Todo\"\nimport { FolderListStore } from \"./todo-lists-view/folder-list-dialog/FolderListStore\"\nimport TodoListFolder from \"entities/TodoListFolder\"\nimport { focusWithStartingCaret, removeItemFromArray } from \"components/util/util\"\nimport { AppBarContainerWithDrawerStore } from \"components/material-ui-app-bar-container/AppBarContainerWithDrawerStore\"\nimport { messageYesNo, snackbar } from \"components/material-ui-modals\"\n\ntype TodoListOrListFolder = TodoList | TodoListFolder\n\nexport class RootStore {\n\n    constructor() {\n        this.todoListsAndFolders = [\n            new TodoListFolder(\"Renovations\", [\n                new TodoList(\"Bathroom\", [\n                    new Todo(\"Mirror\"),\n                    new Todo(\"Another mirror\"),\n                    new Todo(\"A mirror for the mirror\"),\n                ]),\n                new TodoList(\"Kitchen\"),\n                new TodoList(\"Kids Room\"),\n            ]),\n            new TodoList(\"Groceries\", [\n                new Todo(\"Milk\"),\n                new Todo(\"Bread\"),\n                new Todo(\"Cheese\"),\n            ]),\n            new TodoList(\"Stuff\", [\n                new Todo(\"Wash the car\"),\n                new Todo(\"Buy fungus medicine\"),\n                new Todo(\"Wash my feet\"),\n            ]),\n        ]\n        observe(this.todoListsAndFolders as IObservableArray<TodoListOrListFolder>, () => setTimeout(() => {\n            this.appBarStore?.setDrawerWidth()\n        }))\n        this.folderStore = new FolderListStore(this)\n    }\n\n    folderStore: FolderListStore\n\n    @observable todoListsAndFolders: TodoListOrListFolder[]\n\n    @action selectTodoList = (list: TodoList) => {\n        this.selectedTodoList = list\n        setTimeout(() => {\n            this.newTodoFocus()\n        });\n    }\n    @observable selectedTodoList?: TodoList\n\n    @computed get titlePrefix() {\n        return (this.selectedTodoList && (\" - \" + this.selectedTodoList.name)) || \"\"\n    }\n\n    @action addNewFolder(folder: TodoListFolder) {\n        this.todoListsAndFolders.push(folder)\n    }\n\n    @action deleteFolder = async (listFolder: TodoListFolder) => {\n\n        if (await messageYesNo({\n            title: \"Folder deletion\",\n            content: `Do you confirm the '${listFolder.name}' folder deletion?`\n        })) {\n            removeItemFromArray(this.todoListsAndFolders, listFolder)\n            snackbar({ title: `The folder '${listFolder.name}' was deleted successfully`, anchorOrigin: { vertical: 'bottom', horizontal: 'right' }, variant: 'success' })\n        }\n    }\n\n    @action deleteList = async (list: TodoList, folder?: TodoListFolder) => {\n\n        if (await messageYesNo({\n            title: \"List deletion\",\n            content: `Do you confirm the '${list.name}' list deletion?`\n        })) {\n            removeItemFromArray((folder ? folder.lists : this.todoListsAndFolders), list)\n            if (list === this.selectedTodoList) {\n                this.selectedTodoList = undefined\n            }\n            snackbar({ title: `The list '${list.name}' was deleted successfully`, anchorOrigin: { vertical: 'bottom', horizontal: 'right' }, variant: 'success' })\n        }\n    }\n\n    @action addNewList(list: TodoList, folder?: TodoListFolder) {\n        if (folder) {\n            folder.lists.push(list)\n            this.appBarStore?.setDrawerWidth()\n\n        } else {\n            this.todoListsAndFolders.push(list)\n        }\n        this.selectTodoList(list)\n    }\n\n    newTodoInputRef = createRef<HTMLInputElement | null>()\n\n    newTodoFocus = () => {\n        focusWithStartingCaret(this.newTodoInputRef.current)\n    }\n\n    appBarStore?: AppBarContainerWithDrawerStore\n    setAppBarStore = (store: AppBarContainerWithDrawerStore) => {\n        this.appBarStore = store\n    }\n}\n\nexport const RootStoreContext = createContext(new RootStore())","import React, { useRef, useCallback } from 'react'\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Menu from '@material-ui/core/Menu'\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\"\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\"\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\n\nexport interface MoreButtonAction {\n    title: string\n    description?: string\n    callback: (event: React.MouseEvent<HTMLElement, MouseEvent>) => any\n}\n\ninterface MoreButtonProps {\n    actions: MoreButtonAction[]\n    size?: 'small' | 'medium'\n    variant?: 'horizontal' | 'vertical'\n    className?: string\n    style?: React.CSSProperties\n}\n\nexport const MoreButton = observer(({ actions, size = 'small', variant = 'horizontal', className, style }: MoreButtonProps) => {\n    const anchorRef = useRef<HTMLButtonElement | null>(null)\n    const store = useLocalStore(sp => ({\n        open: false,\n        toggleOpen: (event: React.MouseEvent<HTMLElement>) => {\n            event.stopPropagation()\n            store.open = !store.open\n        },\n        close: (event: React.MouseEvent<HTMLElement>) => {\n            event.stopPropagation()\n            store.open = false\n        },\n    }), { actions })\n\n    return (\n        <>\n            <IconButton ref={anchorRef} onClick={store.toggleOpen} className={className} style={style} size={size}>\n                {variant === 'vertical' ? <MoreVertIcon /> : <MoreHorizIcon />}\n            </IconButton>\n            <Menu open={store.open} anchorEl={anchorRef.current} onClose={store.close}>\n                {actions.map((option, index) => (\n                    <MoreButtonItem\n                        key={index}\n                        option={option}\n                        handleClose={store.close}\n                    />\n                ))}\n            </Menu>\n        </>\n    )\n})\ninterface MoreButtonItemProps {\n    option: MoreButtonAction\n    handleClose: (event: React.MouseEvent<HTMLElement>) => any\n}\n\nconst MoreButtonItem = React.forwardRef<HTMLLIElement, MoreButtonItemProps>(({ option, handleClose }, ref) => {\n    const { title, callback, description } = option\n\n    const handleClick = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        handleClose(event)\n        callback(event)\n    }, [handleClose, callback])\n    \n    const text = (\n        <Typography variant='inherit'>\n            {title}\n        </Typography>\n    )\n\n    const withTooltip = (!!description ? (\n        <Tooltip title={description}>\n            {text}\n        </Tooltip>\n    ): text)\n\n    return (\n        <MenuItem ref={ref} onClick={handleClick}>\n            {withTooltip}\n        </MenuItem>\n    )\n}) ","import React, { useContext } from 'react'\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport { RootStoreContext } from \"../../../RootStore\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\n\nimport ListIcon from \"@material-ui/icons/List\"\nimport TodoList from 'entities/TodoList'\nimport { useTheme } from '@material-ui/core/styles'\nimport { MoreButtonAction, MoreButton } from 'components/material-ui-more-button/MoreButton'\nimport TodoListFolder from 'entities/TodoListFolder'\n\ninterface TodoListRowProps {\n    list: TodoList\n    folder?: TodoListFolder\n    nestingLevel?: number\n}\nexport const TodoListRow = observer(({ list, folder, nestingLevel = 0 }: TodoListRowProps) => {\n    const rootStore = useContext(RootStoreContext)\n    const theme = useTheme()\n\n    const store = useLocalStore(source => ({\n        get listItemStyle() {\n            if (source.nestingLevel) {\n                return { paddingLeft: theme.spacing(nestingLevel * 4) }\n            }\n            return undefined\n        },\n        get actions() {\n            return [\n                {\n                    title: \"Delete List\",\n                    callback: () => rootStore.deleteList(source.list, source.folder),\n                },\n                {\n                    title: \"Rename List\",\n                    callback: () => rootStore.folderStore.renameList(source.list),\n                },\n            ] as MoreButtonAction[]\n        },\n        onClick: () => {\n            rootStore.selectTodoList(source.list)\n            rootStore.appBarStore?.closeIfTemporary()\n        }\n    }), { list, folder, nestingLevel })\n\n    return <>\n        <ListItem\n            style={store.listItemStyle}\n            button onClick={store.onClick}\n            selected={list === rootStore.selectedTodoList}\n        >\n            <ListItemIcon>\n                <ListIcon />\n            </ListItemIcon>\n            <ListItemText primary={list.name} />\n            <MoreButton actions={store.actions} variant='vertical' />\n        </ListItem>\n    </>\n})","import React from 'react'\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport Collapse from '@material-ui/core/Collapse'\nimport { observable, action } from 'mobx'\n\ninterface CollapsibleListItemProps {\n    initialCollapsed?: boolean\n    label?: string\n    icon?: React.ReactElement\n    button?: React.ReactElement\n    setStore?: (store: CollapsibleListItemStore) => any\n}\n\nexport class CollapsibleListItemStore {\n    constructor(sp: CollapsibleListItemProps) {\n        this.collapsed = sp.initialCollapsed || false\n        sp.setStore && sp.setStore(this)\n    }\n    @observable collapsed: boolean\n    @action toggleOpen = () => {\n        this.collapsed = !this.collapsed\n    }\n}\nexport const CollapsibleListItem = observer((props: React.PropsWithChildren<CollapsibleListItemProps>) => {\n    const localStore = useLocalStore(source => new CollapsibleListItemStore(source), props)\n\n    return <>\n        <ListItem button onClick={localStore.toggleOpen}>\n            {props.icon && <ListItemIcon children={props.icon} />}\n            <ListItemText primary={props.label} />\n            \n            {localStore.collapsed ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n            {props.button}\n        </ListItem>\n        <Collapse in={localStore.collapsed}>\n            {props.children}\n        </Collapse>\n    </>\n})","import React, { useContext } from 'react'\nimport { observer, useLocalStore } from \"mobx-react-lite\"\nimport TodoListFolder from \"entities/TodoListFolder\"\nimport FolderIcon from \"@material-ui/icons/Folder\"\nimport { TodoListRow } from './TodoListRow'\nimport List from '@material-ui/core/List'\nimport { CollapsibleListItem } from 'components/material-ui-list-items/CollapsibleListItem'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport { RootStoreContext } from 'features/RootStore'\nimport { MoreButton } from 'components/material-ui-more-button'\nimport { MoreButtonAction } from 'components/material-ui-more-button/MoreButton'\n\ninterface TodoListFolderRowProps {\n    listFolder: TodoListFolder\n}\n\nconst useStyles = makeStyles((theme) => ({\n    add: {\n        margin: theme.spacing(-1, 0, -1, 2),\n    }\n}))\n\nexport const TodoListFolderRow = observer((props: TodoListFolderRowProps) => {\n    const rootStore = useContext(RootStoreContext)\n\n    const store = useLocalStore(sp => ({\n        get actions() {\n            return [\n                {\n                    title: \"Add List\",\n                    description: 'Creates a new list in this folder',\n                    callback: () => rootStore.folderStore.addListToFolder(sp.listFolder)\n                },\n                {\n                    title: \"Delete Folder\",\n                    callback: () => rootStore.deleteFolder(sp.listFolder)\n                },\n                {\n                    title: \"Rename Folder\",\n                    callback: () => rootStore.folderStore.renameFolder(sp.listFolder)\n                },\n            ] as MoreButtonAction[]\n        },\n    }), props)\n\n    const classes = useStyles()\n    \n    return <>\n        <CollapsibleListItem\n            button={<MoreButton className={classes.add} actions={store.actions} variant='vertical' />}\n            icon={<FolderIcon />}\n            label={props.listFolder.name}\n            setStore={props.listFolder.setCollapsibleStore}\n        >\n            <List disablePadding>\n                {props.listFolder.lists.map((list, index) => (\n                    <TodoListRow key={index} nestingLevel={1} list={list} folder={props.listFolder} />\n                ))}\n            </List>\n        </CollapsibleListItem>\n    </>\n})","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { RootStoreContext } from '../../RootStore'\nimport { MessageDialog } from 'components/material-ui-modals'\nimport { InputProps } from 'input-props'\nimport { TextField } from '@material-ui/core'\n\nexport const FolderListDialog = observer(() => {\n    const store = useContext(RootStoreContext)\n    const { folderStore } = store\n   \n    return (\n        <MessageDialog\n            actions={[\n                {\n                    name: 'Ok',\n                    callback: folderStore.confirmAction,\n                    color: 'primary',\n                    title: `Confirms the ${folderStore.entityType === 'list' ? 'list' : 'folder'} creation`,\n                },\n                {\n                    name: 'Cancel',\n                    callback: folderStore.closeAddFolderList,\n                    color: 'primary',\n                },\n            ]}\n            maxWidth='md'\n            open={folderStore.showNameEditor}\n            onClose={folderStore.closeAddFolderList}\n        >\n            <InputProps stateObject={folderStore} propertyName='folderOrListName' errorHandler={folderStore.errorHandler}>\n                <TextField\n                    inputProps={{ ref: folderStore.inputRef }}\n                    label={`${folderStore.entityType === 'list' ? 'List' : 'Folder'} name`}\n                    fullWidth\n                    onKeyUp={folderStore.onFolderEnterPress}\n                />\n            </InputProps>\n\n        </MessageDialog>\n    )\n})","import React, { useContext } from 'react'\nimport { observer } from \"mobx-react-lite\"\nimport { RootStoreContext } from \"../../RootStore\"\nimport TodoListFolder from \"entities/TodoListFolder\"\nimport { TodoListFolderRow } from './rows/TodoListFolderRow'\nimport { TodoListRow } from './rows/TodoListRow'\nimport List from '@material-ui/core/List'\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd'\nimport CreateNewFolderIcon from '@material-ui/icons/CreateNewFolder'\nimport Fab from '@material-ui/core/Fab'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { FolderListDialog } from '../folder-list-dialog/FolderListDialog'\n\nconst useStyles = makeStyles((theme) => ({\n    fabList: {\n        position: 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    fabFolder: {\n        position: 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(11),\n    },\n}),\n);\nexport const TodoListsDrawerContent = observer(() => {\n    const classes = useStyles()\n    const store = useContext(RootStoreContext)\n    const { folderStore } = store\n\n    return <>\n        <List>\n            {store.todoListsAndFolders.map((listOrFolder, index) => {\n                if (listOrFolder instanceof TodoListFolder) {\n                    return <TodoListFolderRow key={index} listFolder={listOrFolder} />\n                } else {\n                    return <TodoListRow key={index} list={listOrFolder} />\n                }\n            })}\n        </List>\n\n        <Tooltip title='Add Folder'>\n            <Fab color=\"primary\" className={classes.fabFolder} onClick={folderStore.addFolder}>\n                <CreateNewFolderIcon />\n            </Fab>\n        </Tooltip>\n        <Tooltip title='Add List to Root'>\n            <Fab color=\"primary\" className={classes.fabList} onClick={folderStore.addList}>\n                <PlaylistAddIcon />\n            </Fab>\n        </Tooltip>\n        \n        <FolderListDialog />\n    </>\n})","import { TodosViewProps } from \"./TodosView\";\nimport { computed, action } from \"mobx\";\nimport Todo from \"entities/Todo\";\nimport { removeItemFromArray } from \"components/util/util\";\nimport { createContext } from \"react\";\n\nexport class TodosStore {\n    constructor(sp: TodosViewProps) {\n        this.sp = sp\n    }\n    sp: TodosViewProps\n\n    @action addTodoToCurrent(todo: Todo) {\n        this.sp.todosContainer.todos.push(todo)\n    }\n\n    @action deleteTodo = (todo: Todo) => {\n        removeItemFromArray(this.sp.todosContainer.todos, todo)\n    }\n    @computed get doneTodosOnCurrentList() {\n        return this.sp.todosContainer.todos.filter(t => t.done) || []\n    }\n\n    @computed get notDoneTodosOnCurrentList() {\n        return this.sp.todosContainer.todos.filter(t => !t.done) || []\n    }\n\n    @computed get hasDoneTodosOnCurrentList() {\n        return this.doneTodosOnCurrentList.length > 0\n    }\n}\n\nexport const TodosStoreContext = createContext(new TodosStore({ todosContainer: { todos: [] } }))","import { RootStore } from \"features/RootStore\"\nimport { TodoRowProps } from \"./TodoRow\"\nimport { action, observable, computed } from \"mobx\"\nimport { focusWithStartingCaret } from \"components/util/util\"\nimport { createContext, createRef } from \"react\"\nimport Todo from \"entities/Todo\"\nimport { MessageDialogAction } from \"components/material-ui-modals/MessageDialog/MessageDialog\"\nimport { FormErrorHandler } from \"input-props\";\nimport { messageYesNo, snackbar } from \"components/material-ui-modals\"\nimport { TodosStore } from \"../TodosStore\"\n\ntype Params = TodoRowProps & { rootStore: RootStore, todosStore: TodosStore }\n\nexport class TodoRowStore {\n    constructor(sp: Params) {\n        this.sp = sp\n    }\n    sp: Params\n    inputRef = createRef<HTMLInputElement | null>()\n\n    @observable errorHandler = new FormErrorHandler<Todo>()\n    @observable editableTodo?: Todo\n\n    @observable detailOpen = false\n\n    @action openDetail = () => {\n        this.detailOpen = true\n        this.editableTodo = this.sp.todo.clone()\n        setTimeout(() => {\n            this.inputRef.current?.focus()\n        }, 100);\n    }\n    @action closeDetail = () => {\n        this.detailOpen = false\n    }\n\n    @action saveDetail = () => {\n        this.errorHandler.reset()\n        if (!this.editableTodo?.description) {\n            this.errorHandler.error('description', 'This field is mandatory')\n            return\n        }\n        this.sp.todo.copyFrom(this.editableTodo!)\n        this.closeDetail()\n    }\n\n    @action deleteTodo = async () => {\n        if (await messageYesNo({\n            title: \"Delete\",\n            content: \"Do you really want to delete it?\"\n        })) {\n            this.sp.todosStore.deleteTodo(this.sp.todo)\n            snackbar({ title: \"To-do deleted successfully. 😢\", variant: 'success', anchorOrigin: { horizontal: 'right', vertical: 'bottom' } })\n        }\n    }\n\n    @computed get actions() {\n        return [\n            {\n                name: \"Ok\",\n                callback: this.saveDetail,\n                color: 'primary',\n            },\n            {\n                name: \"Cancel\",\n                callback: this.closeDetail,\n                color: 'primary',\n            },\n            {\n                name: \"Delete\",\n                callback: this.deleteTodo,\n                color: 'secondary'\n            }\n        ] as MessageDialogAction[]\n    }\n\n    @action onInputKeyPress = (event: React.KeyboardEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n\n            const { done } = this.sp.todo\n            const list = (done ? this.sp.todosStore.doneTodosOnCurrentList : this.sp.todosStore.notDoneTodosOnCurrentList)\n            const currentTodoIndex = list.indexOf(this.sp.todo)\n            const lastIndex = list.length - 1\n\n            if (event.key === 'ArrowDown') {\n                if (currentTodoIndex + 1 <= lastIndex) {\n                    focusWithStartingCaret(list[currentTodoIndex + 1].inputRef.current)\n                } else {\n                    if (!done) {\n                        if (this.sp.todosStore.doneTodosOnCurrentList.length > 0) {\n                            focusWithStartingCaret(this.sp.todosStore.doneTodosOnCurrentList[0].inputRef.current)\n                        }\n                    }\n                }\n            } else if (event.key === 'ArrowUp') {\n                if (currentTodoIndex - 1 >= 0) {\n                    focusWithStartingCaret(list[currentTodoIndex - 1].inputRef.current)\n                } else {\n                    if (done) {\n                        if (this.sp.todosStore.notDoneTodosOnCurrentList.length > 0) {\n                            const last = this.sp.todosStore.notDoneTodosOnCurrentList.length - 1\n                            focusWithStartingCaret(this.sp.todosStore.notDoneTodosOnCurrentList[last].inputRef.current)\n                        }\n                    } else {\n                        focusWithStartingCaret(this.sp.rootStore.newTodoInputRef.current)\n                    }\n                }\n            }\n        }\n    }\n\n}\nconst rootStore = new RootStore()\nconst todo = new Todo()\nconst todosStore = new TodosStore({ todosContainer: { todos: [] } })\nexport const TodoStoreContext = createContext(new TodoRowStore({ todo, rootStore, todosStore }))\n\n","import React from \"react\"\nimport { observer } from \"mobx-react-lite\"\nimport FormHelperText from \"@material-ui/core/FormHelperText\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\n\ninterface CheckBoxWithLabelProps {\n    label: string\n    onChange?: any\n    value?: any\n    checked?: boolean\n    lookups?: { id: number, name?: string }[]\n    disabled?: boolean\n    fullWidth?: boolean\n    required?: boolean\n    error?: boolean\n    helperText?: string\n    autoFocus?: boolean\n    title?: string\n}\n\nexport const CheckBoxWithLabel = observer((props: CheckBoxWithLabelProps) => {\n    return (\n        <>\n         {/* <FormControl fullWidth={props.fullWidth} error={props.error} > */}\n            <FormControlLabel label={props.label} control={\n                <Checkbox\n                    inputProps={{\n                        'aria-label': props.label,\n                        'title': props.title,\n                    }}\n                    required={props.required}\n                    onChange={props.onChange}\n                    checked={props.checked}\n                    value={props.checked}\n                    disabled={props.disabled}\n                    autoFocus={props.autoFocus}\n                />\n            } />\n\n            {(props.helperText ? <FormHelperText error={props.error}>{props.helperText}</FormHelperText> : null)}\n         {/* </FormControl> */}\n        </>\n    )\n})","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { TodoStoreContext } from './TodoRowStore'\nimport { TransitionProps } from '@material-ui/core/transitions/transition'\nimport Slide from '@material-ui/core/Slide/Slide'\nimport { MessageDialog } from 'components/material-ui-modals'\nimport { InputProps } from 'input-props'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport { CheckBoxWithLabel } from 'components/material-ui-checkbox-with-label'\nimport { KeyboardDatePicker } from \"@material-ui/pickers/DatePicker\"\nimport Typography from '@material-ui/core/Typography'\nimport { TodosView } from '../TodosView'\nimport { TransitionComponentProps } from 'components/material-ui-modals/MessageDialog/MessageDialog'\n\nexport interface TodoDetailProps {\n    readOnly?: boolean\n}\n\nconst SlideUpTransition = React.forwardRef(function Transition(\n    props: TransitionComponentProps,\n    ref: React.Ref<unknown>,\n) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\n\nconst nullChange = () => null\n\nexport const TodoDetail = observer((props: TodoDetailProps) => {\n    const store = useContext(TodoStoreContext)\n\n    return (\n        <MessageDialog\n            title={`Details`}\n            TransitionComponent={SlideUpTransition}\n            open={store.detailOpen}\n            onClose={store.closeDetail}\n            actions={store.actions}\n        >\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <InputProps stateObject={store.editableTodo!} propertyName='description' errorHandler={store.errorHandler}>\n                        <TextField\n                            inputProps={{ ref: store.inputRef }}\n                            label='Description'\n                            fullWidth\n                            disabled={props.readOnly}\n                        />\n                    </InputProps>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputProps stateObject={store.editableTodo!} propertyName='done' errorHandler={store.errorHandler}>\n                        <CheckBoxWithLabel\n                            label='Done?'\n                            fullWidth\n                            disabled={props.readOnly}\n                        />\n                    </InputProps>\n                </Grid>\n                <Grid item xs={6}>\n                    <InputProps stateObject={store.editableTodo!} propertyName='dueDate' errorHandler={store.errorHandler} config={{ elementValueForUndefinedOrNull: () => null }}>\n                        <KeyboardDatePicker\n                            autoOk\n                            label=\"Due Date\"\n                            fullWidth\n                            value={null}\n                            onChange={nullChange}\n                            format=\"dd/MM/yyyy\"\n                            disabled={props.readOnly}\n                        />\n                    </InputProps>\n                </Grid>\n                <Grid item xs={12}>\n                    <InputProps stateObject={store.editableTodo!} propertyName='notes' errorHandler={store.errorHandler}>\n                        <TextField\n                            multiline\n                            label='Notes'\n                            fullWidth\n                            disabled={props.readOnly}\n                        />\n                    </InputProps>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant='h6'>\n                        Sub-Tasks\n                    </Typography>\n                    <br />\n                    <TodosView todosContainer={store.editableTodo!} />\n                </Grid>\n            </Grid>\n        </MessageDialog>\n    )\n})","import React, { useContext } from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport Todo from 'entities/Todo'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { InputProps } from 'input-props'\nimport InputBase from '@material-ui/core/InputBase'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { TodoRowStore, TodoStoreContext } from './TodoRowStore'\nimport { RootStoreContext } from 'features/RootStore'\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\nimport CommentIcon from '@material-ui/icons/Comment'\nimport CalendarIcon from '@material-ui/icons/CalendarToday'\nimport IconButton from '@material-ui/core/IconButton'\n\n\nimport { TodoDetail } from './TodoDetail'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport moment from 'moment'\nimport { TodosStoreContext } from '../TodosStore'\n\nexport interface TodoRowProps {\n    todo: Todo\n}\n\nconst useStyles = makeStyles((theme) => ({\n    checkbox: {\n        margin: theme.spacing(-1, 1, -1, -1),\n    },\n    completed: {\n        textDecoration: 'line-through'\n    }\n}))\n\nexport const TodoRow = observer((props: TodoRowProps) => {\n    const rootStore = useContext(RootStoreContext)\n    const todosStore = useContext(TodosStoreContext)\n    const store = useLocalStore(sp => new TodoRowStore(sp), { ...props, rootStore, todosStore })\n    const classes = useStyles()\n\n    return <TodoStoreContext.Provider value={store}>\n        <ListItem>\n\n            <InputProps stateObject={props.todo} propertyName='done'>\n                <Checkbox className={classes.checkbox} />\n            </InputProps>\n\n            <ListItemText>\n\n                <InputProps stateObject={props.todo} propertyName='description'>\n                    <InputBase\n                        inputProps={{ ref: props.todo.inputRef }}\n                        onKeyDown={store.onInputKeyPress}\n                        disabled={props.todo.done}\n                        className={props.todo.done ? classes.completed : undefined}\n                        fullWidth\n\n                    />\n                </InputProps>\n\n            </ListItemText>\n            {!!props.todo.notes && (\n                <Tooltip title={props.todo.notes}>\n                    <IconButton>\n                        <CommentIcon />\n\n                    </IconButton>\n                </Tooltip>\n            )}\n            {!!props.todo.dueDate && (\n                <Tooltip title={moment(props.todo.dueDate).format('DD/MM/YYYY')}>\n                    <IconButton>\n                        <CalendarIcon />\n                    </IconButton>\n\n                </Tooltip>\n            )}\n\n            <IconButton onClick={store.openDetail}>\n                <MoreVertIcon />\n            </IconButton>\n        </ListItem>\n        <TodoDetail readOnly={props.todo.done} />\n    </TodoStoreContext.Provider>\n})","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { RootStoreContext } from 'features/RootStore'\nimport { TodoRow } from './todo/TodoRow'\nimport Divider from '@material-ui/core/Divider'\nimport Todo from 'entities/Todo'\n\ninterface TodosListProps {\n    done: boolean\n    todos: Todo[]\n}\nexport const TodosList = observer((props: TodosListProps) => {\n    const rootStore = useContext(RootStoreContext)\n\n    if (!rootStore.selectedTodoList) {\n        return null\n    }\n\n    return (<>\n        {props.todos.map((t, index) => (\n            <React.Fragment key={t.id}>\n                {(!props.done || index > 0) && <Divider />}\n                <TodoRow todo={t} />\n            </React.Fragment>\n        ))}\n    </>)\n})","import React, { useContext } from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport Todo from 'entities/Todo'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { RootStoreContext } from 'features/RootStore'\nimport InputBase from '@material-ui/core/InputBase'\nimport { InputProps } from 'input-props'\nimport Button from '@material-ui/core/Button'\nimport { focusWithStartingCaret } from 'components/util/util'\nimport { TodosStoreContext } from '../TodosStore'\n\nexport const NewTodo = observer(() => {\n    const rootStore = useContext(RootStoreContext)\n    const todosStore = useContext(TodosStoreContext)\n\n    const store = useLocalStore(() => ({\n        description: \"\",\n        add: () => {\n            todosStore.addTodoToCurrent(new Todo(store.description))\n            store.description = \"\"\n        },\n        get canAdd() {\n            return store.description.length > 0\n        },\n        keyPressAdd: (e: React.KeyboardEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n            if (e.key === 'Enter') {\n                store.canAdd && store.add()\n            } else if (e.key === 'ArrowDown') {\n                if (todosStore.notDoneTodosOnCurrentList.length > 0) {\n                    focusWithStartingCaret(todosStore.notDoneTodosOnCurrentList[0].inputRef.current)\n                } else if (todosStore.doneTodosOnCurrentList.length > 0) {\n                    focusWithStartingCaret(todosStore.doneTodosOnCurrentList[0].inputRef.current)\n                }\n            }\n        }\n    }))\n\n    const input = (\n        <InputProps stateObject={store} propertyName='description'>\n            <InputBase\n                inputProps={{ ref: rootStore.newTodoInputRef }}\n                placeholder=\"Add new...\"\n                onKeyUp={store.keyPressAdd}\n                fullWidth\n                endAdornment={(store.canAdd && (\n                    <Button size='small' color='primary' onClick={store.add}>\n                        Add\n                    </Button>\n                )) || undefined}\n            />\n        </InputProps>\n    )\n\n    return <>\n        <ListItem>\n            <ListItemText>\n                {input}\n            </ListItemText>\n        </ListItem>\n    </>\n})","import React, { useContext } from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport { RootStoreContext } from 'features/RootStore'\nimport Paper from '@material-ui/core/Paper'\nimport List from '@material-ui/core/List'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport { TodosList } from './TodosList'\nimport { NewTodo } from './todo/NewTodo'\nimport Typography from '@material-ui/core/Typography'\nimport Todo from 'entities/Todo'\nimport { TodosStore, TodosStoreContext } from './TodosStore'\n\nconst useStyles = makeStyles(theme => ({\n    list: {\n        padding: 0\n    },\n    typography: {\n        paddingLeft: theme.spacing(2)\n    }\n}))\n\nexport interface TodosViewProps {\n    todosContainer: { todos: Todo[] }\n}\n\nexport const TodosView = observer((props: TodosViewProps) => {\n    const classes = useStyles()\n    const rootStore = useContext(RootStoreContext)\n    const store = useLocalStore(sp => new TodosStore(sp), props)\n\n    if (!rootStore.selectedTodoList) {\n        return null\n    }\n\n    return (\n        <TodosStoreContext.Provider value={store}>\n            <Paper>\n                <List className={classes.list}>\n                    <NewTodo />\n                    <TodosList done={false} todos={store.notDoneTodosOnCurrentList} />\n                </List>\n            </Paper>\n            {store.hasDoneTodosOnCurrentList && (<>\n                <br />\n                <Typography className={classes.typography} variant='h6'>Completed: </Typography>\n                <br />\n                <Paper>\n                    <List className={classes.list}>\n                        <TodosList done={true} todos={store.doneTodosOnCurrentList} />\n                    </List>\n                </Paper>\n            </>)}\n        </TodosStoreContext.Provider>\n    )\n})","import React from 'react'\nimport { observer, useLocalStore } from 'mobx-react-lite'\nimport { AppBarContainerWithDrawer } from 'components/material-ui-app-bar-container/AppBarContainerWithDrawer'\nimport { RootStoreContext, RootStore } from './RootStore'\nimport { TodoListsDrawerContent } from './todo-lists-view/todo-lists/TodoListsDrawerContent'\nimport { TodosView } from './todos-view/TodosView'\n\nexport const Main = observer(() => {\n    const store = useLocalStore(() => new RootStore())\n    return (\n        \n        <RootStoreContext.Provider value={store}>\n            <AppBarContainerWithDrawer\n                title={'Todos' + store.titlePrefix}\n                drawer={<TodoListsDrawerContent />}\n                setStore={store.setAppBarStore}\n            >\n                {!!store.selectedTodoList && (\n                    <TodosView todosContainer={store.selectedTodoList} />\n                )}\n            </AppBarContainerWithDrawer >\n        </RootStoreContext.Provider>\n    )\n})","import React from 'react'\n\nimport './App.css'\nimport 'typeface-roboto'\nimport { theme } from 'theme'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport { Main } from 'features/Main'\nimport { setModalTheme } from 'components/material-ui-modals'\nimport Utils from '@date-io/moment'\nimport MuiPickersUtilsProvider from '@material-ui/pickers/MuiPickersUtilsProvider'\n\nsetModalTheme(theme)\n\nconst App = () => {\n    return (\n        <MuiThemeProvider theme={theme}>\n            <MuiPickersUtilsProvider utils={Utils}>\n                <Main />\n            </MuiPickersUtilsProvider>\n        </MuiThemeProvider>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}